import lombok.Builder;
import lombok.Data;

import java.time.Instant;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

/**
 * For implement this task focus on clear code, and make this solution as simple readable as possible
 * Don't worry about performance, concurrency, etc
 * You can use in Memory collection for sore data
 * <p>
 * Please, don't change class name, and signature for methods save, search, findById
 * Implementations should be in a single class
 * This class could be auto tested
 */
public class DocumentManager {

    /**
     * Implementation of this method should upsert the document to your storage
     * And generate unique id if it does not exist, don't change [created] field
     *
     * @param document - document content and author data
     * @return saved document
     */

    private final Map<String, Document> documentStore = new HashMap<>();
    

    public Document save(Document document) {

        if (document.getId() == null || document.getId().isEmpty()) {
            document.setId(UUID.randomUUID().toString());
            document.setCreated(Instant.now());
        } else {
            documentStore.computeIfPresent(document.getId(), (key, existingDoc) -> {
                document.setCreated(existingDoc.getCreated());
                return document;
            });
        }

        documentStore.putIfAbsent(document.getId(), document);
        return document;
    }

    /**
     * Implementation this method should find documents which match with request
     *
     * @param request - search request, each field could be null
     * @return list matched documents
     */
    public List<Document> search(SearchRequest request) {

        if (request == null) {
            return new ArrayList<>(documentStore.values());
        }
        return documentStore.values().stream()
                .filter(doc -> matchesSearchRequest(doc, request))
                .collect(Collectors.toList());
    }

    /**
     * Implementation this method should find document by id
     *
     * @param id - document id
     * @return optional document
     */
    public Optional<Document> findById(String id) {
        return Optional.ofNullable(documentStore.get(id));
    }

    private boolean matchesSearchRequest(Document document, SearchRequest request) {
        String title = document.getTitle();
        String content = document.getContent();
        Author author = document.getAuthor();
        Instant created = document.getCreated();

        if (isNonEmpty(request.getTitlePrefixes()) &&
                request.getTitlePrefixes().stream().noneMatch(title::startsWith)) {
            return false;
        }

        if (isNonEmpty(request.getContainsContents()) &&
                request.getContainsContents().stream().noneMatch(content::contains)) {
            return false;
        }

        if (isNonEmpty(request.getAuthorIds()) && !request.getAuthorIds().contains(author.getId())) {
            return false;
        }

        if ((request.getCreatedFrom() != null && created.isBefore(request.getCreatedFrom())) ||
                (request.getCreatedTo() != null && created.isAfter(request.getCreatedTo()))) {
            return false;
        }

        return true;
    }

    private boolean isNonEmpty(Collection<?> collection) {
        return collection != null && !collection.isEmpty();
    }

    @Data
    @Builder
    public static class SearchRequest {
        private List<String> titlePrefixes;
        private List<String> containsContents;
        private List<String> authorIds;
        private Instant createdFrom;
        private Instant createdTo;
    }

    @Data
    @Builder
    public static class Document {
        private String id;
        private String title;
        private String content;
        private Author author;
        private Instant created;
    }

    @Data
    @Builder
    public static class Author {
        private String id;
        private String name;
    }
}
